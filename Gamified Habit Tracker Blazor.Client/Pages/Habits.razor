@page "/Habits"
@inject HabitService _habitService
@rendermode @(new InteractiveWebAssemblyRenderMode(prerender:false))
@inject NavigationManager nav
@inject AuthenticationStateProvider _authState

<PageTitle>Habits</PageTitle>

<div class="Habits-page">
	<h1>Habits</h1>

	<HabitDropdown UpdateHabits="RefreshHabits" Title="Daily Habits  ▼" Habits="_NotCompletedHabits" Completed="false"></HabitDropdown>
	<br /><br /><br /><br />
	<HabitDropdown UpdateHabits="RefreshHabits" Title="Completed habits  ▼" Habits="_CompletedHabits" Completed="true"></HabitDropdown>

	<h3>
		Current Streak :   @Streak    🔥
		
	</h3>
</div>


@code {
	private List<Habit> _Habits = new List<Habit>();
	private List<Habit> _CompletedHabits = new List<Habit>();
	private List<Habit> _NotCompletedHabits = new List<Habit>();
	public int Streak { get; set; } = 0;
	public int userid { get; set; }

	protected override async Task OnInitializedAsync()
	{
		userid = ((CustomAuthProvider)_authState).GetUserID();
		_Habits = await _habitService.GetHabits() ?? new();
		_CompletedHabits = await _habitService.GetCompletedHabits(userid) ?? new(); 
		_NotCompletedHabits = await _habitService.GetNonCompletedHabits(userid) ?? new(); 
		Streak = await _habitService.CurrentStreak(userid); 
		
	}
	public async Task RefreshHabits()
	{
		_CompletedHabits = await _habitService.GetCompletedHabits(userid) ?? new(); 
		_NotCompletedHabits = await _habitService.GetNonCompletedHabits(userid) ?? new(); 
		Streak = await _habitService.CurrentStreak(userid); 
	}
	protected async override Task OnAfterRenderAsync(bool firstRender)
	{
		
		await base.OnAfterRenderAsync(firstRender);
	}



}
