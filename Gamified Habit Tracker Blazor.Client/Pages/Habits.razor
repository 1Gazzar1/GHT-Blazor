@page "/habits"
@inject HabitService _habitService
@rendermode @(new InteractiveWebAssemblyRenderMode(prerender:false))
@inject NavigationManager nav

<h3>Habits</h3>

<HabitDropdown Title="Daily Habits  ▼" Habits="habits"></HabitDropdown>

<table class="table">
	<thead>
		<tr>
			<th>ID</th>
			<th>Name</th>
			<th>Freq</th>
			<th>EXP</th>
			<th>Status</th>
		</tr>
	</thead>
	<tbody>
		@foreach(var habit in habits)
		{
			<tr>
				<td>@habit.HabitID</td>
				<td>@habit.Name</td>
				<td>@habit.Frequency</td>
				<td>@habit.ExperiencePointsReward</td>
				<td>
					@if (@habit.Status)
					{
						<p>Completed</p>
					}
					else
					{
						<p>Work in Progess</p>
					}
				</td>
				<td>
					<button class="btn btn-primary" @onclick="() => CompleteHabit(habit.HabitID)">
						Complete
					</button>
					<button class="btn btn-primary" @onclick="() => EditHabit(habit.HabitID)">
					Edit
					</button>
				
					<button class="btn btn-danger" @onclick="() => DeleteHabit(habit.HabitID)">
						Delete
					</button>
				</td>
			</tr>
		}
	</tbody>
	
	<button class="btn btn-primary" @onclick="AddHabit">Add Habit</button>
</table>


@code {
	List<Habit> habits = new List<Habit>();

	protected override async Task OnInitializedAsync()
	{
		habits = await _habitService.GetHabits();
	}


	public void EditHabit(int id)
	{
		nav.NavigateTo($"/edit-habit/{id}");
	}
	public void AddHabit()
	{
		nav.NavigateTo($"/edit-habit");
	}
	public async Task DeleteHabit(int id)
	{
		await _habitService.DeleteHabit(id);
		var habitToDelete = habits.FirstOrDefault(h => h.HabitID == id);
		if (habitToDelete != null)
		{
			habits.Remove(habitToDelete);
		}
		StateHasChanged();
	}
	public async Task CompleteHabit(int id)
	{
		await _habitService.CompleteHabit(id);
		var habitToComplete = habits.FirstOrDefault(h => h.HabitID == id);
		if (habitToComplete != null)
		{
			habitToComplete.Status = true;
		}
		StateHasChanged();
	}
}
