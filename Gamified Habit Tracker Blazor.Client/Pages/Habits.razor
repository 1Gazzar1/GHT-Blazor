@page "/Habits"
@inject HabitService _habitService
@inject UserService _userService
@rendermode @(new InteractiveWebAssemblyRenderMode(prerender:false))
@inject NavigationManager nav
@inject AuthenticationStateProvider _authState

<PageTitle>Habits</PageTitle>

<div class="Habits-page">
	<h1 style="margin-top : 100px">Habits</h1>

	<HabitDropdown user_id ="user_id" UpdateHabits="RefreshHabits" Title="Work in Progress Habits  ▼" Habits="_NotCompletedHabits" Completed="false"></HabitDropdown>
	<br /><br /><br /><br />
	<HabitDropdown user_id="user_id" UpdateHabits="RefreshHabits" Title="Completed habits  ▼" Habits="_CompletedHabits" Completed="true"></HabitDropdown>

	<h3>
		Current Streak :   @Streak    🔥
		
	</h3>
	<button class="skip-button"  @onclick="() => SkipDay()">
		skip day
	</button>
	@if (user.HasSkipDay)
	{
		<p>You still have a skip day this month</p>
	}
	else
	{
		<p>You consumed your skip day this month :( </p>
	}

	<br />
	<small class="small">you can only skip a day once a month to keep your streak !!</small>
	<br />
	<small class="small">you can refresh your skip by doing atleast one habit in a new month</small>
	
</div>


@code {
	private List<Habit> _Habits = new List<Habit>();
	private List<Habit> _CompletedHabits = new List<Habit>();
	private List<Habit> _NotCompletedHabits = new List<Habit>();
	public int Streak { get; set; } = 0;
	public int user_id { get; set; }
	public User? user { get; set; } = new User();

	protected override async Task OnInitializedAsync()
	{
		await _authState.GetAuthenticationStateAsync();
		user_id = ((CustomAuthProvider)_authState).GetUserID();
		_Habits = await _habitService.GetHabits() ?? new();
		_CompletedHabits = await _habitService.GetCompletedHabits(user_id) ?? new();
		_CompletedHabits = _CompletedHabits.OrderBy(h => h.CompletedTime).Reverse().ToList();
		_NotCompletedHabits = await _habitService.GetNonCompletedHabits(user_id) ?? new(); 
		Streak = await _habitService.CurrentStreak(user_id);
		user = await _userService.GetUserByID(user_id);
		if (!user.HasSkipDay)
		{
			await _habitService.CheckSkipDayRefresh(user_id);
		}

	}
	public async Task RefreshHabits()
	{
		_CompletedHabits = await _habitService.GetCompletedHabits(user_id) ?? new(); 
		_CompletedHabits = _CompletedHabits.OrderBy(h => h.CompletedTime).Reverse().ToList();
		_NotCompletedHabits = await _habitService.GetNonCompletedHabits(user_id) ?? new(); 
		Streak = await _habitService.CurrentStreak(user_id); 
		if (!user.HasSkipDay)
		{
			await _habitService.CheckSkipDayRefresh(user_id);
		}
		user = await _userService.GetUserByID(user_id);
	}
	
	public async Task SkipDay()
	{
		await _habitService.SkipDay(user_id);
		StateHasChanged();
	}

	protected async override Task OnAfterRenderAsync(bool firstRender)
	{
		
		await base.OnAfterRenderAsync(firstRender);
	}



}
