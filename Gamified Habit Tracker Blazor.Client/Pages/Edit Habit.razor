@page "/edit-habit"
@page "/edit-habit/{id:int}"
@inject HabitService _habitService
@rendermode @(new InteractiveWebAssemblyRenderMode(prerender:false))
@inject NavigationManager nav
@inject AuthenticationStateProvider _authState

<div class="Edit-Habit-page">
	@if (id == null)
	{
		<h1 style="margin-top:100px">Add a Habit</h1>
		<PageTitle>Adding Habit...</PageTitle>
	}
	else
	{
		<h1 style="margin-top:100px">Edit Habit</h1>
		<PageTitle>Editing Habit...</PageTitle>
	}

	<div class="habit-form">
		<EditForm Model="habit" OnSubmit="HandleSubmit">
			<div>
				<label for="Name"><h5>Habit Name</h5></label>
				<input type = "text" id="Name" @bind="habit.Name" class="edit-habit-input"> </input>
			</div>			
			<div>
				<label for="Exp"><h5>Habit Exp</h5></label>
				<input type="number" id="Exp" @bind="habit.ExperiencePointsReward" class="edit-habit-input"> </input>
			</div>
			<button type="submit" class="btn btn-primary">Save</button>
		</EditForm>
	</div>
	<Notification Text="@NotificationMessage" />

</div>
	
@code {

	[Parameter] public int? id { get; set; }
	public Habit habit { get; set; } = new Habit();

	public int user_id { get; set; }

	public string? NotificationMessage { get; set; }		

	public async Task HandleSubmit()
	{

		if (habit.ExperiencePointsReward > 200)
		{
			ShowNotification("You can't make the exp over 200 \n be True to yourself :)");
			habit.ExperiencePointsReward = 0;
			
		}
		else if (habit.ExperiencePointsReward <= 0)
		{
			ShowNotification("?");
			habit.ExperiencePointsReward = 0;
			
		}
		else if (id != null)
		{
			habit.UserID = user_id;
			await _habitService.UpdateHabit((int)id, habit);
			nav.NavigateTo("/habits");
		}
		else 
		{
			habit.UserID = user_id;
			await _habitService.AddHabit(habit);
			nav.NavigateTo("/habits");
		}


	}
	public void ShowNotification(string? message)
	{
		NotificationMessage = message;
		StateHasChanged();
	}
	protected async override Task OnInitializedAsync()
	{
		await _authState.GetAuthenticationStateAsync();
		user_id = ((CustomAuthProvider)_authState).GetUserID();
		
		await base.OnInitializedAsync();
	}
}