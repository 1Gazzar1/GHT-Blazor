@rendermode @(new InteractiveWebAssemblyRenderMode(prerender:false))
@inject AuthenticationStateProvider _authState
@inject AuthService _authService
@inject NavigationManager Nav

<div class="form-container">
    <h3>Enter your Name & Password</h3>
    <div class="login">

    <EditForm Model="userInfo" FormName="LoginForm" OnValidSubmit="HandleLogin">
            <input type="text" id="name" @bind="@userInfo.Username" placeholder="Username" required />
            <input type="password" id="pwd" @bind="@userInfo.Password" placeholder="Password" required />
        <button type="submit">Login</button>
    </EditForm>


        <h6>Don't have an account? <a href="" @onclick="OnRegister">Register</a></h6>

        <h5>@ErrorMSG</h5>
    </div>
</div>

@code {
	public LoginDTO userInfo { get; set; } = new LoginDTO();
	public string? ErrorMSG { get; set; } 
	[Parameter]
	public EventCallback RegisterCall { get; set; }
	private async Task HandleLogin()
	{

		ErrorMSG = "Attempting to log in...";  // Display a message to indicate login started                                               // Temporary value for testing

		try
		{

			// Perform login request
			var response = await _authService.Login(userInfo);

			var token = response._token;



			if (!string.IsNullOrEmpty(token))
			{
				((CustomAuthProvider)_authState).MarkasLoggedIn(token);
				Nav.NavigateTo("/habits");
			}
			else
			{
				ErrorMSG = "Login failed: invalid credentials.";
			}
		}
		catch (Exception ex)
		{
			ErrorMSG = $"Invalid Username or Password (probably)";
		}
	}
	private async Task OnRegister()
	{
		ErrorMSG = "bruh";
		await RegisterCall.InvokeAsync();
	}
}
