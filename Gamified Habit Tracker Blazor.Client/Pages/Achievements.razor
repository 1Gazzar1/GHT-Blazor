@page "/Achievements"

@inject AchievementService _achievementService
@rendermode @(new InteractiveWebAssemblyRenderMode(prerender:false))
@inject AuthenticationStateProvider _authState


<PageTitle>Achievements</PageTitle>

<div class="achievement-page">
	<h1>Achievements</h1>
	<div class="Achievements-container">
		@foreach (var ach in _achievements)
		{
			<div class="Achievement">
				<div class="Achievement-img">
				</div>
				<div class="Achievement-details">
					<h3>@ach.Name</h3>
					<h5>@ach.Description</h5>
					<h5>Exp Earned : @ach.PointsForCompletion</h5>
				</div>
				<div class="Achievement-completion">
					@if (@ach.Status)
					{
						<h6>Completed !!!</h6>
						<h6>Date Earned : @ach.DateEarned</h6>
						<h2>✅</h2>
					}
					else
					{
						<h6 style="opacity : 0;">Date Earned : 10/21/2024 10:46:07 PM</h6>
						<h2>❌</h2>
					}
				</div>
			</div>
		}
		@user_id
		
	</div>
</div>



@code {
	public List<UserAchievementDTO> _achievements { get; set; } = new List<UserAchievementDTO>();
	public int user_id { get; set; }


	protected async override  Task OnInitializedAsync()
	{
		await _authState.GetAuthenticationStateAsync();
		user_id = ((CustomAuthProvider)_authState).GetUserID();
		
		_achievements = await _achievementService.GetAllAchievement(user_id) ?? new();
		await base.OnInitializedAsync();
	}


}

