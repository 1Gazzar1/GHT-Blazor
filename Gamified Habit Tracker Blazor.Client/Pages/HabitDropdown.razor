@inject NavigationManager nav
@inject HabitService _habitService

<div class="dropdown">
    <label for="@($"{Title}dropdownToggle")" class="dropdown-btn">@Title</label>
    <input type="checkbox" id="@($"{Title}dropdownToggle")" class="dropdown-checkbox">
  
  
    <div class="dropdown-content">
        @foreach (var habit in Habits)
        {
            <div class="habit" >
                <div class="habit-text">
                    <div class="habit-name"><p>✔ @Count   @habit.Name</p></div>
                    <div class="habit-freq"><p>Freq :   @habit.Frequency</p></div>
                    <div class="habit-exp"><p>EXP :   @habit.ExperiencePointsReward</p></div>
                    @if (Completed)
                    {
                        <div class="habit-completed-time">
                            <p> Completed on :  @habit.CompletedTime</p>
                        </div>
                    }
                </div>
                
                @if (!Completed)
                {
                    <div class="habit-buttons">
                        <button class="habit-button complete" @onclick="() => CompleteHabit(habit.HabitID)">
                            <p>Complete</p>
                        </button>
                        <button class="habit-button edit" @onclick="() => EditHabit(habit.HabitID)">
                            <p>Edit</p>
                        </button>
                        <button class="habit-button delete" @onclick="() => DeleteHabit(habit.HabitID)">
                            <p>Delete</p>
                        </button>
                    </div>
                }            
                
                
        
            </div>
            
            Count += 1;
        }
        @if (!Completed)
        {
            <div class="habit">
                <button class="habit-button add" @onclick ="() => AddHabit()">
                    <p>Add Habit       ✚</p>
                </button>
            </div>
        }
        
      
        
    </div>
</div>

@code{
    [Parameter]
    public List<Habit>? Habits { get; set; }

    [Parameter]
    public string? Title { get; set; }

    [Parameter]
    public bool Completed { get; set; }

    [Parameter]
    public EventCallback UpdateHabits { get; set; }

    public int Count { get; set; } = 1;  

    public void EditHabit(int id)
    {
        nav.NavigateTo($"/edit-habit/{id}");
    }
    public void AddHabit()
    {
        nav.NavigateTo($"/edit-habit");
    }
    public async Task DeleteHabit(int id)
    {
        await _habitService.DeleteHabit(id);
        var habitToDelete = Habits.FirstOrDefault(h => h.HabitID == id);
        if (habitToDelete != null)
        {
            Habits.Remove(habitToDelete);
        }

        StateHasChanged();

    }
    public async Task CompleteHabit(int id)
    {
        await _habitService.CompleteHabit(id);
        var habitToComplete = Habits.FirstOrDefault(h => h.HabitID == id);
        if (habitToComplete != null)
        {
            habitToComplete.Status = true;
            Habits.Remove(habitToComplete);
        }
        OnUpdateHabit();
        StateHasChanged();

    }
    public void OnUpdateHabit()
    {
        UpdateHabits.InvokeAsync();
    }
    protected override Task OnParametersSetAsync()
    {
        return base.OnParametersSetAsync();
    }
    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        Count = 1;
        await  base.OnAfterRenderAsync(firstRender);
    }
}